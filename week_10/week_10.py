# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bkwi2r89OJOLwgPq5m0gYQl-OgwdWxu5
"""

# Install necessary packages if not already installed
!pip install pandas scikit-learn

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

# Assuming your data is saved in a CSV file named 'tictactoe_data.csv'
# Update the file path accordingly
file_path = 'sample_data/game_log.csv'

# Read the data from the CSV file
df = pd.read_csv(file_path)

# Display the DataFrame
print(df.head())

# Descriptive Statistics
print(df.describe())

# Extract row and column indices from 'FirstMove' and create new columns
df[['Row', 'Column']] = pd.DataFrame(df['FirstMove'].apply(lambda x: pd.Series(eval(x))))

# Function to classify the starting position
def classify_position(row):
    if row['Row'] in [1, 3] and row['Column'] in [1, 3]:
        return 'Corner'
    elif row['Row'] == 2 and row['Column'] == 2:
        return 'Center'
    else:
        return 'Middle'

# Apply the function to create a new 'StartPosition' column
df['StartPosition'] = df.apply(classify_position, axis=1)

# Display the updated DataFrame
print(df.head())

# Convert categorical data to numerical data
df['StartPosition'] = pd.Categorical(df['StartPosition']).codes

# Prepare data for modeling
X = df[['StartPosition']]
y = df['Output'].apply(lambda x: 1 if x == 'Win' else 0)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build a logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Display classification report
print(classification_report(y_test, y_pred))

# Display model fit parameters
print("Model Coefficients:", model.coef_)
print("Model Intercept:", model.intercept_)